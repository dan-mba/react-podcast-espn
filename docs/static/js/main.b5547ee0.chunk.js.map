{"version":3,"sources":["Podcasts.js","App.js","index.js"],"names":["Podcasts","Component","render","podcasts","this","props","items","length","slice","map","item","index","key","className","selected","onClick","e","clickFunc","enclosure","$","url","title","description","_","time","Math","floor","App","constructor","super","state","rss","isLoaded","playing","handleClick","bind","console","log","setState","componentDidMount","axios","get","params","then","response","data","src","channel","image","alt","height","width","config","forceAudio","attributes","controls","tracks","ReactDOM","document","getElementById"],"mappings":"6QAUA,MAAMA,UAAiBC,YACrBC,SAWE,MAAMC,GAPHC,KAAKC,MAAMC,MAAMC,OAAS,GACrBH,KAAKC,MAAMC,MAAME,MAAM,EAAE,IAEzBJ,KAAKC,MAAMC,OAIEG,IAAI,CAACC,EAAMC,KAC9B,gCAAKC,IAAKD,EACRE,UAAWT,KAAKC,MAAMS,WAAaH,EAAQ,mBAAqB,UAChEI,QAAUC,GAAMZ,KAAKC,MAAMY,UAAUP,EAAKQ,UAAUC,EAAEC,IAAKT,EAAMK,IACjE,6BAAMN,EAAKW,OACX,yBAAKR,UAAU,WACgB,kBAArBH,EAAKY,YAA2BZ,EAAKY,YAAYC,EAAIb,EAAKY,YAAY,6BADhF,MAxBiBE,EA0BId,EAAK,mBAzBtBe,KAAKC,MAAMF,EAAO,IAGf,IAFHA,EAAO,IAsBX,OAxBR,IAAyBA,IA+BrB,OACE,6BAAMrB,IAKGH,Q,iBCjCf,MAAM2B,UAAY1B,YAChB2B,YAAYvB,GACVwB,MAAMxB,GACND,KAAK0B,MAAQ,CACXC,IAAK,GACLC,UAAU,EACVZ,IAAK,GACLN,UAAW,EACXmB,SAAS,GAEX7B,KAAK8B,YAAc9B,KAAK8B,YAAYC,KAAK/B,MAG3C8B,YAAYd,EAAKN,EAAUE,GACzBoB,QAAQC,IAAIjB,GACZhB,KAAKkC,SACH,CACElB,IAAKA,EACLa,SAAS,EACTnB,SAAUA,IAKhByB,oBACEC,IAAMC,IAAI,kCAAmC,CAC3CC,OAAQ,CACNX,IAAK,oEAGRY,KAAMC,IACLxC,KAAKkC,SAAS,CACZP,IAAKa,EAASC,KAAKd,IACnBC,UAAU,MAKhB9B,SACE,OAAKE,KAAK0B,MAAME,SASZ,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKiC,IAAK1C,KAAK0B,MAAMC,IAAIgB,QAAQC,MAAM5B,IAAK6B,IAAI,KAChD,yBAAKpC,UAAU,cACb,yBAAKA,UAAU,SAAST,KAAK0B,MAAMC,IAAIgB,QAAQ1B,OAC/C,6BAAMjB,KAAK0B,MAAMC,IAAIgB,QAAQzB,eAIjC,kBAAC,IAAD,CAAaT,UAAU,cAAcO,IAAKhB,KAAK0B,MAAMV,IACnDa,QAAS7B,KAAK0B,MAAMG,QAASiB,OAAO,OAAOC,MAAM,OACjDC,OAAQ,CACNC,YAAY,EACZC,WAAY,CACVJ,OAAQ,OACRC,MAAO,OACPI,UAAU,GAEZC,OAAQ,MAGZ,kBAAC,EAAD,CAAUlD,MAAOF,KAAK0B,MAAMC,IAAIgB,QAAQrC,KACtCO,UAAWb,KAAK8B,YAChBpB,SAAUV,KAAK0B,MAAMhB,YA9BzB,yBAAKD,UAAU,OACb,wCACA,yBAAKA,UAAU,gBAAe,8BAAW,8BAAW,iCAmC/Cc,QC/Ef8B,IAASvD,OAAO,kBAAC,EAAD,MAASwD,SAASC,eAAe,W","file":"static/js/main.b5547ee0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Podcasts.css';\r\n\r\nfunction convertDuration(time) {\r\n  var min = Math.floor(time / 60);\r\n  var sec = time % 60;\r\n\r\n  return min + \":\" + sec;\r\n}\r\n\r\nclass Podcasts extends Component {\r\n  render() {\r\n    var arr;\r\n\r\n    /* Only display the 10 most recent podcasts */\r\n    if(this.props.items.length > 10) {\r\n      arr = this.props.items.slice(0,10);\r\n    } else {\r\n      arr = this.props.items;\r\n    }\r\n\r\n    /* Map array of podcasts to JSX */\r\n    const podcasts = arr.map((item, index) => \r\n      <div key={index}\r\n        className={this.props.selected === index ? \"Selected Podcast\" : \"Podcast\"}\r\n        onClick={(e) => this.props.clickFunc(item.enclosure.$.url, index,e)}>\r\n        <div>{item.title}</div>\r\n        <div className=\"PodDesc\">\r\n          {typeof item.description === 'object' ? item.description._ : item.description}<br/>\r\n          ( {convertDuration(item[\"itunes:duration\"])} )\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>{podcasts}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Podcasts;","import React, { Component } from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport Podcasts from './Podcasts.js';\nimport ReactPlayer from 'react-player/file';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rss: [],\n      isLoaded: false,\n      url: \"\",\n      selected: -1,\n      playing: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(url, selected, e) {\n    console.log(url);\n    this.setState(\n      {\n        url: url,\n        playing: true,\n        selected: selected\n      });\n  }\n\n  /* Retrieve the JSON version of the RSS feed from the back-end & overcome CORS  */\n  componentDidMount() {\n    axios.get(\"https://flannel-glade.glitch.me\", {\n      params: {\n        rss: \"http://www.espn.com/espnradio/feeds/rss/podcast.xml?id=2942325\"\n      }\n    })\n    .then((response) => {\n      this.setState({\n        rss: response.data.rss,\n        isLoaded: true\n      });\n    })\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <div className=\"App\">\n          <div>Loading</div>\n          <div className=\"lds-facebook\"><div></div><div></div><div></div></div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"Header\">\n            <img src={this.state.rss.channel.image.url} alt=\"\"></img>\n            <div className=\"HeaderText\">\n              <div className=\"Title\">{this.state.rss.channel.title}</div>\n              <div>{this.state.rss.channel.description}</div>\n            </div>\n          </div>\n\n          <ReactPlayer className=\"mediaPlayer\" url={this.state.url} \n            playing={this.state.playing} height=\"40px\" width=\"100%\"\n            config={{\n              forceAudio: true,\n              attributes: {\n                height: \"40px\",\n                width: \"100%\",\n                controls: true\n              },\n              tracks: []\n            }}/> \n\n          <Podcasts items={this.state.rss.channel.item} \n            clickFunc={this.handleClick}\n            selected={this.state.selected}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}